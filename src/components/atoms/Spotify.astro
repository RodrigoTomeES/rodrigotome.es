---
import type { TypeAs, TypeClass } from '@/types';
import type { HTMLTag, Polymorphic } from 'astro/types';

export type Props<T extends HTMLTag> = Polymorphic<TypeAs<T>> & TypeClass;

const { class: className = '', as: Element = 'dev', ...props } = Astro.props;
---

<Element class={`block-container ${className}`} {...props} id="spotify">
  <div class="btn-back"></div>
  <div class="btn-front"></div>
  <div class="wrapper">
    <svg
      xmlns="http://www.w3.org/2000/svg"
      class="icon"
      width="64"
      height="64"
      viewBox="0 0 496 512"
    >
      <path
        d="M248 8C111.1 8 0 119.1 0 256s111.1 248 248 248 248-111.1 248-248S384.9 8 248 8zm100.7 364.9c-4.2 0-6.8-1.3-10.7-3.6-62.4-37.6-135-39.2-206.7-24.5-3.9 1-9 2.6-11.9 2.6-9.7 0-15.8-7.7-15.8-15.8 0-10.3 6.1-15.2 13.6-16.8 81.9-18.1 165.6-16.5 237 26.2 6.1 3.9 9.7 7.4 9.7 16.5s-7.1 15.4-15.2 15.4zm26.9-65.6c-5.2 0-8.7-2.3-12.3-4.2-62.5-37-155.7-51.9-238.6-29.4-4.8 1.3-7.4 2.6-11.9 2.6-10.7 0-19.4-8.7-19.4-19.4s5.2-17.8 15.5-20.7c27.8-7.8 56.2-13.6 97.8-13.6 64.9 0 127.6 16.1 177 45.5 8.1 4.8 11.3 11 11.3 19.7-.1 10.8-8.5 19.5-19.4 19.5zm31-76.2c-5.2 0-8.4-1.3-12.9-3.9-71.2-42.5-198.5-52.7-280.9-29.7-3.6 1-8.1 2.6-12.9 2.6-13.2 0-23.3-10.3-23.3-23.6 0-13.6 8.4-21.3 17.4-23.9 35.2-10.3 74.6-15.2 117.5-15.2 73 0 149.5 15.2 205.4 47.8 7.8 4.5 12.9 10.7 12.9 22.6 0 13.6-11 23.3-23.2 23.3z"
        fill="url(#gradient-full)"></path>

      <defs>
        <linearGradient id="gradient-full" x1="0%" y1="0%" x2="120%" y2="120%">
          <stop offset="0%" stop-color="#ffffff"></stop>
          <stop offset="100%" stop-color="#ffffff00"></stop>
        </linearGradient>
        <linearGradient
          id="gradient-half"
          x1="-50%"
          y1="-50%"
          x2="100%"
          y2="100%"
        >
          <stop offset="0%" stop-color="#ffffff"></stop>
          <stop offset="100%" stop-color="#ffffff00"></stop>
        </linearGradient>
      </defs>
    </svg>
  </div>
</Element>

<style>
  .block-container {
    position: relative;
    width: 100%;
    height: 100%;
    border-radius: 32px;
    overflow: hidden;
    display: grid;
    grid-template-areas: 'stack';
  }

  .block-container > * {
    grid-area: stack;
  }

  .btn-back {
    width: inherit;
    height: inherit;
    background: linear-gradient(135deg, #0e602b, -20%, #1ed760 120%);
    box-shadow: 16px 0 40px #e4e4e4;
  }

  .btn-front {
    width: inherit;
    height: inherit;
    background-color: #ffffff33;
    backdrop-filter: blur(20px);
  }

  svg.frame {
    width: inherit;
    height: inherit;
  }

  svg.frame rect {
    width: inherit;
    height: inherit;
    fill: none;
    stroke-width: 4;
  }

  .wrapper {
    position: absolute;
    inset: 50% 0 0 50%;
    transform: translate(-50%, -50%);
    display: flex;
  }

  svg.icon {
    animation: heartbeat 2s infinite;
    transform-origin: center;
    margin: auto;
  }

  @keyframes heartbeat {
    0% {
      transform: scale(0.75);
    }
    20% {
      transform: scale(1);
    }
    40% {
      transform: scale(0.75);
    }
    60% {
      transform: scale(1);
    }
    80% {
      transform: scale(0.75);
    }
    100% {
      transform: scale(0.75);
    }
  }
</style>

<script>
  window.addEventListener('load', async () => {
    try {
      const response = await fetch(`.${import.meta.env.BASE_URL}/api/spotify`);
      const data = await response.json();

      if (data.isPlaying) {
        const spotify = document.getElementById('spotify');

        // insert an image with the cover
        const img = document.createElement('img');
        img.src = data.cover;
        img.alt = data.album;
        img.style.gridArea = 'stack';
        img.style.width = '100%';
        img.style.height = '100%';
        img.style.objectFit = 'cover';
        img.style.objectPosition = 'center';
        img.style.zIndex = '1';
        spotify?.appendChild(img);

        document
          .getElementById('spotify')
          ?.setAttribute('data-song', data.song);
        document
          .getElementById('spotify')
          ?.setAttribute('data-artist', data.artist);
        document
          .getElementById('spotify')
          ?.setAttribute('data-album', data.album);
        document
          .getElementById('spotify')
          ?.setAttribute('data-cover', data.cover);
      }
    } catch {}
  });
</script>
